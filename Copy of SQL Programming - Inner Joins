{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of SQL Programming - Inner Joins","provenance":[{"file_id":"1lA1xzoc3QGaye5qGdrXhh0007mFKsmUy","timestamp":1620331447578}],"collapsed_sections":["ctxn0NRtBP_N","NInIeBPRBUjy","aC5B9W7MBxN2","G5YSZtRrCQ2_"],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"GMEtO1wzBhGc"},"source":["<font color=\"green\">*To start working on this notebook, or any other notebook that we will use in the Moringa Data Science Course, we will need to save our own copy of it. We can do this by clicking File > Save a Copy in Drive. We will then be able to make edits to our own copy of this notebook.*</font>"]},{"cell_type":"markdown","metadata":{"id":"H6KrxhPuBI1j"},"source":["# SQL Programming - Inner Joins"]},{"cell_type":"markdown","metadata":{"id":"ctxn0NRtBP_N"},"source":["## 1.0 Lets connect to our Database"]},{"cell_type":"code","metadata":{"id":"3tISouHVFsEI","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1620463747159,"user_tz":240,"elapsed":1626,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"fe17c6f4-5402-4d1a-8e7f-aad9a179e90c"},"source":["# We will first load the sql extension into our environment\n","%load_ext sql\n","\n","# Then connect to our in memory sqlite database\n","# NB: This database will cease to exist as soon as the database connection is closed. \n","%sql sqlite://"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Connected: @None'"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"5Wr95CMAGocI","executionInfo":{"status":"ok","timestamp":1620463747161,"user_tz":240,"elapsed":1622,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}}},"source":["# Importing Pandas\n","import pandas as pd"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NInIeBPRBUjy"},"source":["## 1.1 Loading our Datasets"]},{"cell_type":"markdown","metadata":{"id":"0LrTLsUj2BEU"},"source":["Datasets used in this notebook:\n","\n","\n","1.   **Countries**\n","\n","> Dataset of European Countries. ([Dataset Download Link](https://drive.google.com/a/moringaschool.com/file/d/1Vz0URHRmUsG17fpzWa02RsCBI2TbPXeV/view?usp=sharing))\n","\n","2.   **Cities** \n","\n","> Dataset of European Cities. ([Dataset Download Link](https://drive.google.com/a/moringaschool.com/file/d/1-S8sact6Ae-A06wntUmBBlr5NH43VLY0/view?usp=sharing))\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"V6dOOEhyAweA","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"error","timestamp":1620463772140,"user_tz":240,"elapsed":1185,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"5d45802b-3bf1-4bc8-a3d7-33760b2f7d7a"},"source":["# Let's load our Countries dataset below\n","# \n","with open('Countries.csv','r') as f:\n","    Countries = pd.read_csv(f, index_col=0, encoding='utf-8')\n","#%sql DROP TABLE if EXISTS Countries;\n","%sql PERSIST Countries;\n","%sql SELECT * FROM Countries LIMIT 5;"],"execution_count":5,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-e957c372b34c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Let's load our Countries dataset below\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Countries.csv'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mCountries\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex_col\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#%sql DROP TABLE if EXISTS Countries;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'Countries.csv'"]}]},{"cell_type":"code","metadata":{"id":"RYXnHNRnA1hP","executionInfo":{"status":"aborted","timestamp":1620463742216,"user_tz":240,"elapsed":2902,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}}},"source":["# Let's load our Cities dataset below\n","#\n","with open('Cities.csv','r') as f:\n","    Cities = pd.read_csv(f, index_col=0, encoding='utf-8')\n","#%sql DROP TABLE if EXISTS Cities;\n","%sql PERSIST Cities;\n","%sql SELECT * FROM Cities LIMIT 5;"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aC5B9W7MBxN2"},"source":["## 1.2 Getting Started"]},{"cell_type":"markdown","metadata":{"id":"0sZIvColA9NC"},"source":["Let's try to learn from the given example below, then apply our learnings to the given challenges using the **`INNER JOIN`** statement;"]},{"cell_type":"code","metadata":{"id":"EhwHqiCxCQUu","colab":{"base_uri":"https://localhost:8080/","height":274},"executionInfo":{"status":"ok","timestamp":1620329778476,"user_tz":240,"elapsed":1775,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"f0dde264-d06a-4730-f758-13f8ef6bb57e"},"source":["# Example 1 \n","# First let's look at the syntax code for the inner join statement\n","# \n","# SELECT <Column names>\n","# FROM table1 INNER JOIN table2\n","# ON table1.column_name = table2.column_name\n","# \n","# On the first line, we select the columns from which we want to join. This columns can be from both tables.\n","# On the second line, we explicitly declare the tables we are joining.\n","# on the third line, we give the search condition. Remember, for us to be able to do inner join or any type of join, there must be a column that is a match in both tables. \n","# So the search condition simply tells SQL the column that is the same in both tables\n","\n","\n","# Let's find all the cities with latitude < 50 in a country with population < 5; \n","# and return the city, country, and population, sorted by country\n","# \n","%%sql\n","SELECT city, Cities.country, population\n","FROM Cities INNER JOIN Countries\n","     ON Cities.country = Countries.country\n","WHERE latitude < 50 AND population < 5\n","ORDER BY Cities.country"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>city</th>\n","            <th>country</th>\n","            <th>population</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Elbasan</td>\n","            <td>Albania</td>\n","            <td>2.9</td>\n","        </tr>\n","        <tr>\n","            <td>Andorra</td>\n","            <td>Andorra</td>\n","            <td>0.07</td>\n","        </tr>\n","        <tr>\n","            <td>Sarajevo</td>\n","            <td>Bosnia and Herzegovina</td>\n","            <td>3.8</td>\n","        </tr>\n","        <tr>\n","            <td>Rijeka</td>\n","            <td>Croatia</td>\n","            <td>4.23</td>\n","        </tr>\n","        <tr>\n","            <td>Split</td>\n","            <td>Croatia</td>\n","            <td>4.23</td>\n","        </tr>\n","        <tr>\n","            <td>Skopje</td>\n","            <td>Macedonia</td>\n","            <td>2.08</td>\n","        </tr>\n","        <tr>\n","            <td>Balti</td>\n","            <td>Moldova</td>\n","            <td>4.06</td>\n","        </tr>\n","        <tr>\n","            <td>Chisinau</td>\n","            <td>Moldova</td>\n","            <td>4.06</td>\n","        </tr>\n","        <tr>\n","            <td>Podgorica</td>\n","            <td>Montenegro</td>\n","            <td>0.63</td>\n","        </tr>\n","        <tr>\n","            <td>Ljubljana</td>\n","            <td>Slovenia</td>\n","            <td>2.07</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Elbasan', 'Albania', 2.9),\n"," ('Andorra', 'Andorra', 0.07),\n"," ('Sarajevo', 'Bosnia and Herzegovina', 3.8),\n"," ('Rijeka', 'Croatia', 4.23),\n"," ('Split', 'Croatia', 4.23),\n"," ('Skopje', 'Macedonia', 2.08),\n"," ('Balti', 'Moldova', 4.06),\n"," ('Chisinau', 'Moldova', 4.06),\n"," ('Podgorica', 'Montenegro', 0.63),\n"," ('Ljubljana', 'Slovenia', 2.07)]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"G5YSZtRrCQ2_"},"source":["### <font color=\"green\">1.2 Challenges</font>"]},{"cell_type":"code","metadata":{"id":"0cy1E0ghCP0K","colab":{"base_uri":"https://localhost:8080/","height":94},"executionInfo":{"status":"ok","timestamp":1620330819822,"user_tz":240,"elapsed":1318,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"e05fb581-2568-4a63-dec9-60dca52ff5a3"},"source":["# Challenge 1\n","# Let's find a city with temperature > 10 that belongs to the EU and doesn't have a coastline, \n","# returning the city, coastline and ordered by temperature\n","# \n","%%sql\n","SELECT city, Cities.country, temperature, EU\n","FROM Cities INNER JOIN Countries\n","     ON Cities.country = Countries.country\n","     WHERE temperature > 10 AND coastline = \"no\" AND EU = \"yes\"\n","ORDER BY temperature\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>city</th>\n","            <th>country</th>\n","            <th>temperature</th>\n","            <th>EU</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Szeged</td>\n","            <td>Hungary</td>\n","            <td>10.34</td>\n","            <td>yes</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Szeged', 'Hungary', 10.34, 'yes')]"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"vovDcZBACPsi","colab":{"base_uri":"https://localhost:8080/","height":294},"executionInfo":{"status":"ok","timestamp":1620330661576,"user_tz":240,"elapsed":1660,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"e670f1c2-a93f-4e04-e284-d5616ee12a76"},"source":["# Challenge 2\n","# Let's find all cities with latitude > 45 in a country with no coastline and with population > 9,\n","# returning the city, country, latitude, and whether it's in the EU.\n","#\n","%%sql\n","SELECT city, Cities.country, population, EU\n","FROM Cities INNER JOIN Countries\n","     ON Cities.country = Countries.country\n","     WHERE latitude > 45 AND population < 9 AND EU = \"no\"\n","ORDER BY Cities.country\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>city</th>\n","            <th>country</th>\n","            <th>population</th>\n","            <th>EU</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Balti</td>\n","            <td>Moldova</td>\n","            <td>4.06</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Chisinau</td>\n","            <td>Moldova</td>\n","            <td>4.06</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Bergen</td>\n","            <td>Norway</td>\n","            <td>5.27</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Bodo</td>\n","            <td>Norway</td>\n","            <td>5.27</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Oslo</td>\n","            <td>Norway</td>\n","            <td>5.27</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Stavanger</td>\n","            <td>Norway</td>\n","            <td>5.27</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Trondheim</td>\n","            <td>Norway</td>\n","            <td>5.27</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Novi Sad</td>\n","            <td>Serbia</td>\n","            <td>8.81</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Basel</td>\n","            <td>Switzerland</td>\n","            <td>8.38</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Geneva</td>\n","            <td>Switzerland</td>\n","            <td>8.38</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Zurich</td>\n","            <td>Switzerland</td>\n","            <td>8.38</td>\n","            <td>no</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Balti', 'Moldova', 4.06, 'no'),\n"," ('Chisinau', 'Moldova', 4.06, 'no'),\n"," ('Bergen', 'Norway', 5.27, 'no'),\n"," ('Bodo', 'Norway', 5.27, 'no'),\n"," ('Oslo', 'Norway', 5.27, 'no'),\n"," ('Stavanger', 'Norway', 5.27, 'no'),\n"," ('Trondheim', 'Norway', 5.27, 'no'),\n"," ('Novi Sad', 'Serbia', 8.81, 'no'),\n"," ('Basel', 'Switzerland', 8.38, 'no'),\n"," ('Geneva', 'Switzerland', 8.38, 'no'),\n"," ('Zurich', 'Switzerland', 8.38, 'no')]"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"n5KCLKwLCPlJ","colab":{"base_uri":"https://localhost:8080/","height":94},"executionInfo":{"status":"ok","timestamp":1620330917659,"user_tz":240,"elapsed":1779,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"ebe5bceb-23a8-45ea-c0ef-6952a54b2191"},"source":["# Challenge 3\n","# Let's find the average temperature of non-european cities with a latitude > 45\n","# \n","%%sql\n","SELECT AVG(temperature)\n","FROM Cities INNER JOIN Countries\n","     ON Cities.country = Countries.country\n","     WHERE EU = \"no\" AND latitude > 45"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>AVG(temperature)</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>6.704375</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[(6.704375,)]"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"qjyFMunjFUql","colab":{"base_uri":"https://localhost:8080/","height":94},"executionInfo":{"status":"ok","timestamp":1620331201618,"user_tz":240,"elapsed":1552,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"bbb08c5f-c5fc-48a7-bd6e-19221c17aefd"},"source":["# Challenge 4 \n","# Let's find minimum and maxiumum temperature of european cities with latitude > 45\n","# \n","%%sql\n","SELECT MAX(temperature), MIN(temperature)\n","FROM Cities INNER JOIN Countries\n","     ON Cities.country = Countries.country\n","WHERE EU = \"yes\" AND latitude > 45\n","ORDER BY temperature DESC\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>MAX(temperature)</th>\n","            <th>MIN(temperature)</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>11.21</td>\n","            <td>-2.2</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[(11.21, -2.2)]"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"G62GzfLrFsr9","colab":{"base_uri":"https://localhost:8080/","height":94},"executionInfo":{"status":"ok","timestamp":1620331276377,"user_tz":240,"elapsed":1399,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"ba77a1cb-e1ae-47c6-e928-efcf00718f19"},"source":["# Challenge 5\n","# Let's find the number of european cities with a latitude > 45\n","# \n","%%sql\n","SELECT COUNT(city)\n","FROM Cities INNER JOIN Countries\n","     ON Cities.country = Countries.country\n","     WHERE EU = 'yes' AND latitude > 45"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>COUNT(city)</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>99</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[(99,)]"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"TauKr2s3Ib-A","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1620331362056,"user_tz":240,"elapsed":1807,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"8f4ad1d2-e781-4417-9f46-a11f111be77f"},"source":["# Challenge 6\n","# Which european cities belong to a country with a coastline?\n","# \n","%%sql\n","SELECT city\n","FROM Cities INNER JOIN Countries\n","     ON Cities.country = Countries.country\n","     WHERE coastline = 'yes' AND EU = 'yes'"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>city</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Aalborg</td>\n","        </tr>\n","        <tr>\n","            <td>Aberdeen</td>\n","        </tr>\n","        <tr>\n","            <td>Abisko</td>\n","        </tr>\n","        <tr>\n","            <td>Albacete</td>\n","        </tr>\n","        <tr>\n","            <td>Algeciras</td>\n","        </tr>\n","        <tr>\n","            <td>Amiens</td>\n","        </tr>\n","        <tr>\n","            <td>Amsterdam</td>\n","        </tr>\n","        <tr>\n","            <td>Ancona</td>\n","        </tr>\n","        <tr>\n","            <td>Angers</td>\n","        </tr>\n","        <tr>\n","            <td>Arad</td>\n","        </tr>\n","        <tr>\n","            <td>Athens</td>\n","        </tr>\n","        <tr>\n","            <td>Augsburg</td>\n","        </tr>\n","        <tr>\n","            <td>Bacau</td>\n","        </tr>\n","        <tr>\n","            <td>Badajoz</td>\n","        </tr>\n","        <tr>\n","            <td>Baia Mare</td>\n","        </tr>\n","        <tr>\n","            <td>Barcelona</td>\n","        </tr>\n","        <tr>\n","            <td>Bari</td>\n","        </tr>\n","        <tr>\n","            <td>Belfast</td>\n","        </tr>\n","        <tr>\n","            <td>Bergamo</td>\n","        </tr>\n","        <tr>\n","            <td>Berlin</td>\n","        </tr>\n","        <tr>\n","            <td>Bialystok</td>\n","        </tr>\n","        <tr>\n","            <td>Bielefeld</td>\n","        </tr>\n","        <tr>\n","            <td>Bilbao</td>\n","        </tr>\n","        <tr>\n","            <td>Birmingham</td>\n","        </tr>\n","        <tr>\n","            <td>Blackpool</td>\n","        </tr>\n","        <tr>\n","            <td>Bologna</td>\n","        </tr>\n","        <tr>\n","            <td>Bonn</td>\n","        </tr>\n","        <tr>\n","            <td>Bordeaux</td>\n","        </tr>\n","        <tr>\n","            <td>Botosani</td>\n","        </tr>\n","        <tr>\n","            <td>Bournemouth</td>\n","        </tr>\n","        <tr>\n","            <td>Bradford</td>\n","        </tr>\n","        <tr>\n","            <td>Braga</td>\n","        </tr>\n","        <tr>\n","            <td>Braila</td>\n","        </tr>\n","        <tr>\n","            <td>Bremen</td>\n","        </tr>\n","        <tr>\n","            <td>Brest</td>\n","        </tr>\n","        <tr>\n","            <td>Brugge</td>\n","        </tr>\n","        <tr>\n","            <td>Bucharest</td>\n","        </tr>\n","        <tr>\n","            <td>Burgas</td>\n","        </tr>\n","        <tr>\n","            <td>Burgos</td>\n","        </tr>\n","        <tr>\n","            <td>Bydgoszcz</td>\n","        </tr>\n","        <tr>\n","            <td>Bytom</td>\n","        </tr>\n","        <tr>\n","            <td>Caen</td>\n","        </tr>\n","        <tr>\n","            <td>Cambridge</td>\n","        </tr>\n","        <tr>\n","            <td>Cartagena</td>\n","        </tr>\n","        <tr>\n","            <td>Catania</td>\n","        </tr>\n","        <tr>\n","            <td>Chemnitz</td>\n","        </tr>\n","        <tr>\n","            <td>Constanta</td>\n","        </tr>\n","        <tr>\n","            <td>Cork</td>\n","        </tr>\n","        <tr>\n","            <td>Cosenza</td>\n","        </tr>\n","        <tr>\n","            <td>Craiova</td>\n","        </tr>\n","        <tr>\n","            <td>Daugavpils</td>\n","        </tr>\n","        <tr>\n","            <td>Dijon</td>\n","        </tr>\n","        <tr>\n","            <td>Dublin</td>\n","        </tr>\n","        <tr>\n","            <td>Dundee</td>\n","        </tr>\n","        <tr>\n","            <td>Edinburgh</td>\n","        </tr>\n","        <tr>\n","            <td>Elblag</td>\n","        </tr>\n","        <tr>\n","            <td>Erfurt</td>\n","        </tr>\n","        <tr>\n","            <td>Exeter</td>\n","        </tr>\n","        <tr>\n","            <td>Foggia</td>\n","        </tr>\n","        <tr>\n","            <td>Frankfurt</td>\n","        </tr>\n","        <tr>\n","            <td>Freiburg</td>\n","        </tr>\n","        <tr>\n","            <td>Galway</td>\n","        </tr>\n","        <tr>\n","            <td>Genoa</td>\n","        </tr>\n","        <tr>\n","            <td>Glasgow</td>\n","        </tr>\n","        <tr>\n","            <td>Göteborg</td>\n","        </tr>\n","        <tr>\n","            <td>Granada</td>\n","        </tr>\n","        <tr>\n","            <td>Grenoble</td>\n","        </tr>\n","        <tr>\n","            <td>Groningen</td>\n","        </tr>\n","        <tr>\n","            <td>Heidelberg</td>\n","        </tr>\n","        <tr>\n","            <td>Helsinki</td>\n","        </tr>\n","        <tr>\n","            <td>Huelva</td>\n","        </tr>\n","        <tr>\n","            <td>Ingolstadt</td>\n","        </tr>\n","        <tr>\n","            <td>Inverness</td>\n","        </tr>\n","        <tr>\n","            <td>Kalamata</td>\n","        </tr>\n","        <tr>\n","            <td>Karlsruhe</td>\n","        </tr>\n","        <tr>\n","            <td>Kaunas</td>\n","        </tr>\n","        <tr>\n","            <td>Kielce</td>\n","        </tr>\n","        <tr>\n","            <td>Kiruna</td>\n","        </tr>\n","        <tr>\n","            <td>Klaipeda</td>\n","        </tr>\n","        <tr>\n","            <td>Koszalin</td>\n","        </tr>\n","        <tr>\n","            <td>Le Mans</td>\n","        </tr>\n","        <tr>\n","            <td>Lille</td>\n","        </tr>\n","        <tr>\n","            <td>Limoges</td>\n","        </tr>\n","        <tr>\n","            <td>Lisbon</td>\n","        </tr>\n","        <tr>\n","            <td>Ljubljana</td>\n","        </tr>\n","        <tr>\n","            <td>Maastricht</td>\n","        </tr>\n","        <tr>\n","            <td>Madrid</td>\n","        </tr>\n","        <tr>\n","            <td>Magdeburg</td>\n","        </tr>\n","        <tr>\n","            <td>Malmö</td>\n","        </tr>\n","        <tr>\n","            <td>Marbella</td>\n","        </tr>\n","        <tr>\n","            <td>Marseille</td>\n","        </tr>\n","        <tr>\n","            <td>Messina</td>\n","        </tr>\n","        <tr>\n","            <td>Metz</td>\n","        </tr>\n","        <tr>\n","            <td>Milan</td>\n","        </tr>\n","        <tr>\n","            <td>Montpellier</td>\n","        </tr>\n","        <tr>\n","            <td>Mulhouse</td>\n","        </tr>\n","        <tr>\n","            <td>Murcia</td>\n","        </tr>\n","        <tr>\n","            <td>Nice</td>\n","        </tr>\n","        <tr>\n","            <td>Odense</td>\n","        </tr>\n","        <tr>\n","            <td>Oulu</td>\n","        </tr>\n","        <tr>\n","            <td>Oviedo</td>\n","        </tr>\n","        <tr>\n","            <td>Palermo</td>\n","        </tr>\n","        <tr>\n","            <td>Patras</td>\n","        </tr>\n","        <tr>\n","            <td>Perpignan</td>\n","        </tr>\n","        <tr>\n","            <td>Perugia</td>\n","        </tr>\n","        <tr>\n","            <td>Pescara</td>\n","        </tr>\n","        <tr>\n","            <td>Pleven</td>\n","        </tr>\n","        <tr>\n","            <td>Plovdiv</td>\n","        </tr>\n","        <tr>\n","            <td>Poznan</td>\n","        </tr>\n","        <tr>\n","            <td>Reims</td>\n","        </tr>\n","        <tr>\n","            <td>Riga</td>\n","        </tr>\n","        <tr>\n","            <td>Rijeka</td>\n","        </tr>\n","        <tr>\n","            <td>Rome</td>\n","        </tr>\n","        <tr>\n","            <td>Rostock</td>\n","        </tr>\n","        <tr>\n","            <td>Ruse</td>\n","        </tr>\n","        <tr>\n","            <td>Salamanca</td>\n","        </tr>\n","        <tr>\n","            <td>Santander</td>\n","        </tr>\n","        <tr>\n","            <td>Sibiu</td>\n","        </tr>\n","        <tr>\n","            <td>Split</td>\n","        </tr>\n","        <tr>\n","            <td>Stara Zagora</td>\n","        </tr>\n","        <tr>\n","            <td>Stockholm</td>\n","        </tr>\n","        <tr>\n","            <td>Swansea</td>\n","        </tr>\n","        <tr>\n","            <td>Tallinn</td>\n","        </tr>\n","        <tr>\n","            <td>Tampere</td>\n","        </tr>\n","        <tr>\n","            <td>Tartu</td>\n","        </tr>\n","        <tr>\n","            <td>Toulouse</td>\n","        </tr>\n","        <tr>\n","            <td>Trieste</td>\n","        </tr>\n","        <tr>\n","            <td>Trikala</td>\n","        </tr>\n","        <tr>\n","            <td>Turku</td>\n","        </tr>\n","        <tr>\n","            <td>Uppsala</td>\n","        </tr>\n","        <tr>\n","            <td>Valencia</td>\n","        </tr>\n","        <tr>\n","            <td>Vigo</td>\n","        </tr>\n","        <tr>\n","            <td>Vilnius</td>\n","        </tr>\n","        <tr>\n","            <td>Warsaw</td>\n","        </tr>\n","        <tr>\n","            <td>Wroclaw</td>\n","        </tr>\n","        <tr>\n","            <td>Zaragoza</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Aalborg',),\n"," ('Aberdeen',),\n"," ('Abisko',),\n"," ('Albacete',),\n"," ('Algeciras',),\n"," ('Amiens',),\n"," ('Amsterdam',),\n"," ('Ancona',),\n"," ('Angers',),\n"," ('Arad',),\n"," ('Athens',),\n"," ('Augsburg',),\n"," ('Bacau',),\n"," ('Badajoz',),\n"," ('Baia Mare',),\n"," ('Barcelona',),\n"," ('Bari',),\n"," ('Belfast',),\n"," ('Bergamo',),\n"," ('Berlin',),\n"," ('Bialystok',),\n"," ('Bielefeld',),\n"," ('Bilbao',),\n"," ('Birmingham',),\n"," ('Blackpool',),\n"," ('Bologna',),\n"," ('Bonn',),\n"," ('Bordeaux',),\n"," ('Botosani',),\n"," ('Bournemouth',),\n"," ('Bradford',),\n"," ('Braga',),\n"," ('Braila',),\n"," ('Bremen',),\n"," ('Brest',),\n"," ('Brugge',),\n"," ('Bucharest',),\n"," ('Burgas',),\n"," ('Burgos',),\n"," ('Bydgoszcz',),\n"," ('Bytom',),\n"," ('Caen',),\n"," ('Cambridge',),\n"," ('Cartagena',),\n"," ('Catania',),\n"," ('Chemnitz',),\n"," ('Constanta',),\n"," ('Cork',),\n"," ('Cosenza',),\n"," ('Craiova',),\n"," ('Daugavpils',),\n"," ('Dijon',),\n"," ('Dublin',),\n"," ('Dundee',),\n"," ('Edinburgh',),\n"," ('Elblag',),\n"," ('Erfurt',),\n"," ('Exeter',),\n"," ('Foggia',),\n"," ('Frankfurt',),\n"," ('Freiburg',),\n"," ('Galway',),\n"," ('Genoa',),\n"," ('Glasgow',),\n"," ('Göteborg',),\n"," ('Granada',),\n"," ('Grenoble',),\n"," ('Groningen',),\n"," ('Heidelberg',),\n"," ('Helsinki',),\n"," ('Huelva',),\n"," ('Ingolstadt',),\n"," ('Inverness',),\n"," ('Kalamata',),\n"," ('Karlsruhe',),\n"," ('Kaunas',),\n"," ('Kielce',),\n"," ('Kiruna',),\n"," ('Klaipeda',),\n"," ('Koszalin',),\n"," ('Le Mans',),\n"," ('Lille',),\n"," ('Limoges',),\n"," ('Lisbon',),\n"," ('Ljubljana',),\n"," ('Maastricht',),\n"," ('Madrid',),\n"," ('Magdeburg',),\n"," ('Malmö',),\n"," ('Marbella',),\n"," ('Marseille',),\n"," ('Messina',),\n"," ('Metz',),\n"," ('Milan',),\n"," ('Montpellier',),\n"," ('Mulhouse',),\n"," ('Murcia',),\n"," ('Nice',),\n"," ('Odense',),\n"," ('Oulu',),\n"," ('Oviedo',),\n"," ('Palermo',),\n"," ('Patras',),\n"," ('Perpignan',),\n"," ('Perugia',),\n"," ('Pescara',),\n"," ('Pleven',),\n"," ('Plovdiv',),\n"," ('Poznan',),\n"," ('Reims',),\n"," ('Riga',),\n"," ('Rijeka',),\n"," ('Rome',),\n"," ('Rostock',),\n"," ('Ruse',),\n"," ('Salamanca',),\n"," ('Santander',),\n"," ('Sibiu',),\n"," ('Split',),\n"," ('Stara Zagora',),\n"," ('Stockholm',),\n"," ('Swansea',),\n"," ('Tallinn',),\n"," ('Tampere',),\n"," ('Tartu',),\n"," ('Toulouse',),\n"," ('Trieste',),\n"," ('Trikala',),\n"," ('Turku',),\n"," ('Uppsala',),\n"," ('Valencia',),\n"," ('Vigo',),\n"," ('Vilnius',),\n"," ('Warsaw',),\n"," ('Wroclaw',),\n"," ('Zaragoza',)]"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"MfW2P-8ARgsT"},"source":[""],"execution_count":null,"outputs":[]}]}