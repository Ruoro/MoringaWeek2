{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Python Programming: Dictionaries","provenance":[{"file_id":"1mWDmqFLGFzMf26YU8gs6N4jwyMnpSOCV","timestamp":1620113737697}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"eOm53BqKoYpl"},"source":["<font color=\"green\">*To start working on this notebook, or any other notebook that we will use in this course, we will need to save our own copy of it. We can do this by clicking File > Save a Copy in Drive. We will then be able to make edits to our own copy of this notebook.*</font>\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"w2gnEI4V253l"},"source":["# Python Programming: Dictionaries"]},{"cell_type":"markdown","metadata":{"id":"aEqAjTGi3E3b"},"source":["## 1.0 Overview\n"]},{"cell_type":"markdown","metadata":{"id":"nJhH3J6y3dBD"},"source":["A dictionary is a collection of key-value pairs, which are unordered, changeable and indexed. Curly brackets are used when writing a dictionary."]},{"cell_type":"markdown","metadata":{"id":"a90lkqj_3IZr"},"source":["## 1.1 Creating a Dictionary"]},{"cell_type":"code","metadata":{"id":"8XQMBtIU7EoL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137961875,"user_tz":240,"elapsed":918,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"30942d02-aff5-481f-f5b9-5135491c8d02"},"source":["# Example 1\n","# We can create a dictionary by placing a sequence of elements within curly braces, \n","# separated by commas as show in the following example.\n","# Let's create a dictionary my_new_friend\n","# \n","my_new_friend = {\n","    'name':'Femi', \n","    'age': 24\n","}\n","\n","# print \n","print(my_new_friend)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["{'name': 'Femi', 'age': 24}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dg_8-2YO7EE3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137962437,"user_tz":240,"elapsed":1451,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"e6cfe5ca-cef3-4f3c-d030-7745d9860e9d"},"source":["# Example 2\n","# Let's create another dictionary car with keys; brand, model and year\n","# \n","car =\t{\n","  'brand': 'Toyota',\n","  'model': 'Prado',\n","  'year': 2007\n","}\n","\n","# Then display it to see what the dictionary contains\n","print(car)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["{'brand': 'Toyota', 'model': 'Prado', 'year': 2007}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KiVcQaXH7D0R","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137962438,"user_tz":240,"elapsed":1438,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"105c8bcb-87c7-427e-98d0-0891b900e7f3"},"source":["# Example 3\n","# Let's create another dictionary\n","#\n","our_class = {\n","    'Name': '7 East', \n","    'Students': 27, \n","    'Wing': 'East'\n","}\n","\n","# printing out our_class\n","print(our_class)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["{'Name': '7 East', 'Students': 27, 'Wing': 'East'}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"49K6mQJg7yUh"},"source":["### 1.1 Challenges"]},{"cell_type":"code","metadata":{"id":"v5e2By6E76hW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137962438,"user_tz":240,"elapsed":1425,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"e1833be1-5028-457a-f1bc-edb474025422"},"source":["# Challenge 1\n","# Create a dictionary family with keys i.e. father,\n","# mother, son and daughter. You can add values of your family\n","# to the key values\n","# \n","family = {\n","    'Father' : 'anaconda',\n","    'Mother' : 'python',\n","    'Son' : 'cobra',\n","    'Daughter': 'grass snake'\n","}\n","print (family)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["{'Father': 'anaconda', 'Mother': 'python', 'Son': 'cobra', 'Daughter': 'grass snake'}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tpBdeH5275i9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137962439,"user_tz":240,"elapsed":1412,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"28eef435-f32f-4b6b-b4d3-dd9f17a427df"},"source":["# Challenge 2\n","# Create a dictionary name powers_dictionary using numbers 1-5 as keys \n","# and their square power as values.  \n","#\n","powers ={\n","    1:1,\n","    2:4,\n","    3:9,\n","    4:16,\n","    5:25\n","}\n","print(powers)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yf9bGNKEKsFF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137962440,"user_tz":240,"elapsed":1400,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"47ad8e4d-8d6f-4f98-91b1-cdb81df0e47b"},"source":["# Challenge 3\n","# A caterer offers three different food packages; \n","# bronze package: starch:rice stew:chicken curry vegetable:cabbages desert:melon\n","# silver package: starch:rice and chappati  stew:beef curry vegetable:spinach desert:melon and bananas\n","# gold package: starch:rice, chappati and mukimo stew: beef curry vegetable:spinach and managu desert: tart\n","# Create a dictionary that stores the above information then preview it\n","# Hint: You can store a dictionary within a dictionary \n","# \n","food_packages = {\n","    'bronze_package' : {'starch':'rice', 'stew':'chicken curry', 'vegetable':'cabbages', 'desert':'melon'},\n","    'silver_package' : {'starch':'rice and chappati',  'stew':'beef curry', 'vegetable':'spinach', 'desert':'melon and bananas'},\n","    'gold_package': {'starch':'rice, chappati and mukimo', 'stew': 'beef curry', 'vegetable':'spinach and managu', 'desert': 'tar'}\n","}\n","print (food_packages)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["{'bronze_package': {'starch': 'rice', 'stew': 'chicken curry', 'vegetable': 'cabbages', 'desert': 'melon'}, 'silver_package': {'starch': 'rice and chappati', 'stew': 'beef curry', 'vegetable': 'spinach', 'desert': 'melon and bananas'}, 'gold_package': {'starch': 'rice, chappati and mukimo', 'stew': 'beef curry', 'vegetable': 'spinach and managu', 'desert': 'tar'}}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UU3YIJYI3gwc"},"source":["## 1.2 Adding Elements to a Dictionary"]},{"cell_type":"code","metadata":{"id":"t-dKvalj7F44","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137962440,"user_tz":240,"elapsed":1383,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"47da33d1-012e-43ec-adf5-f20e1ff33fb2"},"source":["# Example 1 \n","# Adding a residence to my_new_friend dictionary that we had initially created\n","# \n","my_new_friend['residence'] = 'Nairobi'  \n","\n","# print out my_new_friend\n","print(my_new_friend)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["{'name': 'Femi', 'age': 24, 'residence': 'Nairobi'}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FsS9Ns-b7FnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137962957,"user_tz":240,"elapsed":1883,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"042707ae-f03e-4294-d8f9-2a0cd194034d"},"source":["# Example 2\n","# We now add color to our car dictionary\n","#\n","car[\"color\"] = \"light gray\"\n","\n","# and print out our dictionary\n","print(car)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["{'brand': 'Toyota', 'model': 'Prado', 'year': 2007, 'color': 'light gray'}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GFY3EYiO7FcZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137962959,"user_tz":240,"elapsed":1868,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"9d3b0547-c120-419a-c9f1-8505981f24c3"},"source":["# Example 3\n","# Adding the school to the dictionary\n","#\n","our_class['School'] = \"Moringa School\";\n","\n","# printing out our class to see the updates\n","print(our_class)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["{'Name': '7 East', 'Students': 27, 'Wing': 'East', 'School': 'Moringa School'}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7tzKw6l87-5h"},"source":["### 1.2 Challenges"]},{"cell_type":"code","metadata":{"id":"jqbEx0BU8EL4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620165368827,"user_tz":240,"elapsed":10446,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"f7573e60-8143-4ba6-f0c1-b5fe986bc946"},"source":["# Challenge 1: \n","# Naivas Supermarket sells two products: bread and milk. \n","# A loaf of bread weighs 400 grams. Each packet of milk is 0.5 litre. \n","# Write a program that reads the number of bread \n","# and the number of packets of milk in an order from the user. \n","# Then your program should compute and display the total quantity of the order.\n","# You should store the order in the dictionary and \n","# prompt the user for another input.\n","# \n","naivas_inventory = {\n","    \"bread\" : 400,\n","    \"milk\" : float(0.5)\n","}\n","\n","#promting the user input \n","\n","x = int (input(\"how many loaves do you need? : \"))\n","y = int (input(\"how much milk do you need? : \"))\n","\n","#preparing the users receipt using the input given \n","user_receipt = {\n","    \"bread_number\" : x,\n","    \"milk_number\" : y \n","}\n","final_weight = x * naivas_inventory[\"bread\"]\n","final_liters = y * naivas_inventory[\"milk\"]\n","\n","print (\"You have\", [user_receipt [\"bread_number\"]],  \"loaves and\", [user_receipt [\"milk_number\"]], \"cartons of milk\\n\")\n","print (\"YOU have \", final_weight, \"grams of bread and \", final_liters, \"liters of milk\")\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["how many loaves do you need? : 12\n","how much milk do you need? : 6\n","You have [12] loaves and [6] cartons of milk\n","\n","YOU have  4800 grams of bread and  3.0 liters of milk\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gQTOkgy2kgLT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137977425,"user_tz":240,"elapsed":16309,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"5c8c8cf4-eb3b-4d0d-9e28-9abe44319751"},"source":["6# Challenge 2:\n","# Two words are anagrams if they contain all of the same letters, \n","# but in a different order. For example, “evil” and “live” \n","# are anagrams because each contains one e, one i, one l, and one v. \n","# Create a program that reads two strings from the user, determines\n","# whether or not they are anagrams, stores and reports the result.\n","# Use a dictionary to solve this problem.\n","# \n","print (\"The program checks for anagrams\")\n","#the user input\n","word1 = str(input(\"write a word: \"))\n","word2 = str(input(\"write a word: \"))\n","#creating a dict for the words\n","\n","anagram = {\n","    \"first\" : str(word1),\n","    \"second\" : str(word2)\n"," }\n"," \n","anagram_list = list(anagram.values())\n","word1_list, word2_list = anagram_list\n","if (sorted(word1_list) == sorted(word2_list)): \n","  print (\"There words are anagrams\")\n","else:\n","  print(\"these are not anagrams\")\n"],"execution_count":11,"outputs":[{"output_type":"stream","text":["The program checks for anagrams\n","write a word: deal\n","write a word: raid\n","these are not anagrams\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3pcE1f56f87G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137992615,"user_tz":240,"elapsed":31486,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"1cf0314a-86d2-494c-8316-cd4e8462515c"},"source":["# Challenge 3:\n","# Create a program that determines and displays \n","# the number of characters in a string entered by the user. \n","# For example, \"Hello, World!\" has 13  characters while \n","# abc has only three character. \n","# Use a dictionary to solve this problem.\n","# \n","print (\"the code displays the number if characters in a string\")\n","#prompt for user imput\n","\n","first_string = str(input(\"write a string: \"))\n","stringdict = {\n","    \"first1\": len (first_string)\n","}\n","print (\"the lenght of your string is: \", [stringdict[\"first1\"]])\n"],"execution_count":12,"outputs":[{"output_type":"stream","text":["the code displays the number if characters in a string\n","write a string: I have a crush\n","the lenght of your string is:  [14]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hzmMe5TP32ra"},"source":["#1.3 Updating Elements in a Dictionary"]},{"cell_type":"code","metadata":{"id":"J66GyFzt7I_X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137992617,"user_tz":240,"elapsed":31471,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"5a8dc2bb-fc93-4b7c-d38d-386d534f5aa2"},"source":["# Example 1\n","# Let's update age on the dictionary my_new_friend \n","#\n","\n","my_new_friend['age'] = 24\n","\n","# print out\n","print(my_new_friend)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["{'name': 'Femi', 'age': 24, 'residence': 'Nairobi'}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zhJabm-I7Jr4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137992619,"user_tz":240,"elapsed":31452,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"7027158e-9ce1-4f06-d40e-e085734bbab0"},"source":["# Example 2\n","# Let's update our dictionary my_new_friend\n","#\n","car[\"color\"] = \"light gray\"\n","\n","# and print out our dictionary\n","print(car)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["{'brand': 'Toyota', 'model': 'Prado', 'year': 2007, 'color': 'light gray'}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PbbAVPsO7JfJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620137992620,"user_tz":240,"elapsed":31441,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"c74ed339-5461-4129-e764-072bb189fde6"},"source":["# Example 3\n","# Updating our class \n","#\n","\n","our_class['Students'] = 29;\n","\n","# printing out our class to see the updates\n","print(our_class)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["{'Name': '7 East', 'Students': 29, 'Wing': 'East', 'School': 'Moringa School'}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Hp9Jaf8V8PE1"},"source":["### 1.3 Challenges"]},{"cell_type":"code","metadata":{"id":"LcK4RI6K8Qrp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620138911645,"user_tz":240,"elapsed":981,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"6042209d-d045-4087-a85a-d11ce6a046da"},"source":["# Challenge 1\n","# Let's update the value of the son and daughter keys of the family dictionary \n","# that we had earlier on created\n","#\n","family[\"Son\"] = \"Baby Shark\";\n","family [\"Daughter\"] = \"Nyoks\";\n","\n","#printout\n","print (family)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["{'Father': 'anaconda', 'Mother': 'python', 'Son': 'Baby Shark', 'Daughter': 'Nyoks', 'son': 'Baby Shark', 'daughter': 'Nyoks'}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EEU_gZax8RN6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139208865,"user_tz":240,"elapsed":955,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"981a1685-b115-4be7-a214-56673a9525d3"},"source":["# Challenge 2\n","# Update value of the gold package in the caterer dictionary to \n","# have vegetable as spinach, cabbage and managu\n","#\n","food_packages[\"gold_package\"][\"vegetable\"] = \"Spinach, Managu and Cabbage\";\n","print (food_packages[\"gold_package\"])"],"execution_count":28,"outputs":[{"output_type":"stream","text":["{'starch': 'rice, chappati and mukimo', 'stew': 'beef curry', 'vegetable': 'Spinach, Managu and Cabbage', 'desert': 'tar'}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jMEwHQI18RCX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620165773941,"user_tz":240,"elapsed":7141,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"f8ac82c8-d216-4bf7-f14f-ce47dfd115d7"},"source":["# Challenge 3\n","# Upon creating the Naivas supermarket dictionary program earlier on,\n","# We will now extend the functionality of your program to be able to also update\n","# the quantity of either the bread or packet of milk.\n","# Write another program the will prompt the user to indicate whether they want\n","# to update the quantity of the product or compute the total quantity of the total order.\n","# Using if statements, your program should execute either to the code you had earlier\n","# on written or to the new code for updating that you will now write\n","#\n","\n","ans = str(input(\"Do you want to update the quantity of the product? \"))\n","\n","if ans == \"yes\":\n","  x = (input (\"update bread quantity: \"))\n","  y = (input (\"Update milk qunatity: \"))\n","else: \n","    print (\"You have\", [user_receipt [\"bread_number\"]],  \"loaves and\", [user_receipt [\"milk_number\"]], \"cartons of milk\\n\")\n","    print (\"YOU have \", final_weight, \"grams of bread and \", final_liters, \"liters of milk\")"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Do you want to update the quantity of the product? no\n","You have [12] loaves and [6] cartons of milk\n","\n","YOU have  4800 grams of bread and  3.0 liters of milk\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"50S5D_qI3kDD"},"source":["#1.4"]},{"cell_type":"code","metadata":{"id":"ZBJa2FHU7Muf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139303158,"user_tz":240,"elapsed":1262,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"e8408dc7-ee6b-4380-8b6b-01990bff07f8"},"source":["# Example 1\n","# Accessing my_new_friend dictionary \n","#\n","name_a = my_new_friend[\"name\"]\n","\n","# print name_a\n","print(name_a)\n","\n","# or we could also\n","name_b = my_new_friend.get(\"name\")\n","\n","# print name_b\n","print(name_b)"],"execution_count":29,"outputs":[{"output_type":"stream","text":["Femi\n","Femi\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"A8ggbH347NPz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139320129,"user_tz":240,"elapsed":1626,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"d4d375b1-702f-49d2-ba52-e1d1f7367ae5"},"source":["# Example 2\n","# Accessing the model in the car dictionary\n","#\n","car_a = car[\"model\"]\n","\n","# print car_a\n","print(car_a)\n","\n","# or we could also\n","car_b = car.get(\"model\")\n","\n","# print name_b\n","print(car_b)"],"execution_count":30,"outputs":[{"output_type":"stream","text":["Prado\n","Prado\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"eaZxBKDf7NF4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139325112,"user_tz":240,"elapsed":1259,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"e82e055b-b2ca-4c52-d6ec-39a70f9507fa"},"source":["# Example 3\n","# Accessing the name in our_class dictionary\n","#\n","our_class_a = our_class[\"Name\"]\n","\n","# or we could also\n","our_class_b = our_class.get(\"Name\")\n","\n","# print our_class_b \n","print(our_class_b)"],"execution_count":31,"outputs":[{"output_type":"stream","text":["7 East\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mqnSUp-a8I65"},"source":["### 1.4 Challenges"]},{"cell_type":"code","metadata":{"id":"uE_DKh_N8XMj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139422049,"user_tz":240,"elapsed":1226,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"bb952d29-4c70-49ba-a814-96873f0b7222"},"source":["# Challenge 1\n","# What is the power of 4 from the powers_dictionary\n","# \n","power4 = powers.get(4)\n","print (power4)"],"execution_count":32,"outputs":[{"output_type":"stream","text":["16\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dt-ZmzrQ8YIM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139491406,"user_tz":240,"elapsed":1055,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"017648e7-f0f7-48a9-995f-28856b378776"},"source":["# Challenge 2\n","# Let's access the silver package from our caterer dictionary\n","#\n","silver_pack = food_packages.get(\"silver_package\")\n","print (silver_pack)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["{'starch': 'rice and chappati', 'stew': 'beef curry', 'vegetable': 'spinach', 'desert': 'melon and bananas'}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xLEaTJdY8X4t","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139532695,"user_tz":240,"elapsed":905,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"a8a5ac63-ab1c-4e29-f9eb-82c025edc0d5"},"source":["# Challenge 3\n","# Access the name of the father from the family dictionary\n","# \n","dad = family.get(\"Father\")\n","print (dad) "],"execution_count":34,"outputs":[{"output_type":"stream","text":["anaconda\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Amb1Bsrbwx6C"},"source":["## 1.5 Checking if a Key exists"]},{"cell_type":"code","metadata":{"id":"bcY3c6DHwwu2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139539564,"user_tz":240,"elapsed":865,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"0703c990-307f-4359-c5cf-1b38e7267bb5"},"source":["# Example 1\n","# We can check if a specified key exists within a dictionary through the use of the `in` keyword;\n","# Let's check if the keyword residence exists in my_new_friend dictionary\n","# \n","if \"residence\" in my_new_friend:\n","  print(\"Yes, the keyword exists in the dictionary\")\n","else:\n","  print('No, the keyword does not exist in the dictionary')"],"execution_count":35,"outputs":[{"output_type":"stream","text":["Yes, the keyword exists in the dictionary\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KJYTGPMKw52k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139552192,"user_tz":240,"elapsed":819,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"ff0b588f-65b3-4972-9422-d5ed0a3f2cc0"},"source":["# Example 2\n","# Let's check if the keyword year exists in car dictionary\n","#\n","if \"year\" in car:\n","  print(\"Yes, the keyword exists in the dictionary\")\n","else:\n","  print('No, the keyword does not exist in the dictionary')"],"execution_count":36,"outputs":[{"output_type":"stream","text":["Yes, the keyword exists in the dictionary\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"U0sTioBMw5tU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139555233,"user_tz":240,"elapsed":505,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"438208e8-5060-44b4-ea20-58cd3e766f7e"},"source":["# Example 3\n","# Checking if the keyword Wing exists in our_class dictionary\n","#\n","if \"Wing\" in our_class:\n","  print(\"Yes, the keyword exists in the dictionary\")\n","else:\n","  print('No, the keyword does not exist in the dictionary')"],"execution_count":37,"outputs":[{"output_type":"stream","text":["Yes, the keyword exists in the dictionary\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1OFB5fL1w6TM"},"source":["### 1.5 Challenges"]},{"cell_type":"code","metadata":{"id":"oUCqFuf_w--X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139620252,"user_tz":240,"elapsed":1935,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"7601da94-114c-41c5-9c5e-e7df7cfb517f"},"source":["# Challenge 1\n","# Does the model key exist in our car dictionary?\n","#\n","if \"model\" in car:\n","  print(\"Yes, the keyword exists in the dictionary\")\n","else:\n","  print('No, the keyword does not exist in the dictionary')"],"execution_count":38,"outputs":[{"output_type":"stream","text":["Yes, the keyword exists in the dictionary\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"y2KKTbcmw_jK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139760107,"user_tz":240,"elapsed":1105,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"bc058606-351e-4637-cc86-e7b0dd8c925e"},"source":["# Challenge 2\n","# Does te\n","# Let's get the power of 6 from our already created powers dictionary\n","#\n","if 6 in powers:\n","  print(powers.get(6))\n","else:\n","  print('No, the Power does not exist in the dictionary')"],"execution_count":40,"outputs":[{"output_type":"stream","text":["No, the keyword does not exist in the dictionary\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bGck3KPGw_HE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139690613,"user_tz":240,"elapsed":1002,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"5f12d2ab-c716-408f-f130-069e8506513b"},"source":["# Challenge 3\n","# Let's find out if the diamond package exists in the caterer package\n","#\n","if \"diamond_package\" in food_packages:\n","  print(\"Yes, the keyword exists in the dictionary\")\n","else:\n","  print('No, the keyword does not exist in the dictionary')"],"execution_count":39,"outputs":[{"output_type":"stream","text":["No, the keyword does not exist in the dictionary\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GDrqXhcWzs6s"},"source":["## 1.6 The No. of elements in a Dictionary"]},{"cell_type":"code","metadata":{"id":"mQMc9N3TzvUA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139785355,"user_tz":240,"elapsed":898,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"cf10dbf8-13f0-4255-e1ab-61c8520527de"},"source":["# Example 1\n","# We can use keyword `len()` to determine how many items (key - value pairs) there are in the dictionary.\n","# Finding out how many items there are in the my_new_friend dictionary\n","#\n","print(len(my_new_friend))"],"execution_count":41,"outputs":[{"output_type":"stream","text":["3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YJbVoIfzzvkC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139789164,"user_tz":240,"elapsed":961,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"ed69975d-24ed-42b8-c7f0-bb171e5e9c5d"},"source":["# Example 2\n","# Finding out how many items there are in the car dictionary\n","#\n","print(len(car))"],"execution_count":42,"outputs":[{"output_type":"stream","text":["4\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ubNhcSttz050","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139792116,"user_tz":240,"elapsed":861,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"5c5c5122-701e-4575-bfef-2dc54313de95"},"source":["# Example 3\n","# Finding out how many items there are in the our_class dictionary\n","#\n","print(len(our_class))"],"execution_count":43,"outputs":[{"output_type":"stream","text":["4\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zN0YcqMmzwGU"},"source":["### 1.6 Challenges"]},{"cell_type":"code","metadata":{"id":"9SWkSQvnz2bh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139813376,"user_tz":240,"elapsed":2554,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"bd96f72f-05b1-423f-9a7b-12d9c30433e2"},"source":["# Challenge 1\n","# Using the family dictionary, let's determine how many family members there are in the family?\n","#\n","print (len(family))"],"execution_count":44,"outputs":[{"output_type":"stream","text":["6\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GKXla2_Qz2Lx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139838481,"user_tz":240,"elapsed":1086,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"18a912ba-d6cc-4aa9-9952-924617688459"},"source":["# Challenge 2\n","# How many items have we stored in our anagrams dictionary?\n","# \n","print (len(anagram))"],"execution_count":45,"outputs":[{"output_type":"stream","text":["2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"y1Yc0df-z2AG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620139875275,"user_tz":240,"elapsed":1124,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"9badcafc-35bd-4e8a-dd47-c159a8a87b0b"},"source":["# Challange 3\n","# Using the cater dictionary, how many meals do we have in our gold package? \n","# \n","print (len(food_packages['gold_package']))"],"execution_count":46,"outputs":[{"output_type":"stream","text":["4\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"t3HfcEjn306L"},"source":["## 1.7 Removing Elements from a Dictionary"]},{"cell_type":"code","metadata":{"id":"g9zlKoiL7PaV","colab":{"base_uri":"https://localhost:8080/","height":253},"executionInfo":{"status":"error","timestamp":1620140183480,"user_tz":240,"elapsed":971,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"57c73cee-025d-4ef3-8b10-70f63e5d3d88"},"source":["# Example 1\n","# We can remove a specific item from the dictionary \n","# with the specified key name using the pop() method. \n","# The clear() method clears the items in the dictionary \n","# while the del keyword deletes the dictionary completely.\n","\n","\n","# Removing age from my_new_friend dictionary\n","my_new_friend['age'] = 23;\n","updated_my_new_friend = my_new_friend.pop(\"age\")\n","\n","# printing out the updated dictionary\n","print(updated_my_new_friend)\n","\n","# now clearing the dictionary \n","updated_my_new_friend.clear()\n","\n","\n","# # printing out the cleared dictionary\n","print(updated_my_new_friend)\n","\n","# # deleting the dictionary completely\n","del updated_my_new_friend"],"execution_count":60,"outputs":[{"output_type":"stream","text":["23\n"],"name":"stdout"},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-60-7f62f472a59d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# now clearing the dictionary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mupdated_my_new_friend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'int' object has no attribute 'clear'"]}]},{"cell_type":"code","metadata":{"id":"JAKiQ6y97PMq","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"error","timestamp":1620140252381,"user_tz":240,"elapsed":1138,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"061a9e18-e6c5-4011-ee18-f8c45bdfbb92"},"source":["# Example 2\n","# Removing model from car dictionary\n","\n","# using the pop method\n","updated_car = car.pop(\"model\")\n","\n","# printing out the updated car dictionary\n","print(updated_car)\n","\n","# now clearing the dictionary \n","updated_car.clear()\n","\n","# printing out the cleared dictionary\n","print(updated_car)\n","\n","# deleting the dictionary completely\n","del updated_car"],"execution_count":64,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-64-12b9db93d263>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# using the pop method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mupdated_car\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcar\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"model\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# printing out the updated car dictionary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'model'"]}]},{"cell_type":"code","metadata":{"id":"hJDrF-_i7OzG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620140263500,"user_tz":240,"elapsed":1254,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"a051c6b4-4ec2-46e2-8a5e-b735b5379a10"},"source":["# Example 3\n","# Removing School from our_class dictionary\n","\n","# using the pop method\n","our_class.pop(\"School\")\n","\n","# printing out the updated our_class dictionary\n","print(our_class)\n","\n","# now clearing the dictionary \n","our_class.clear()\n","\n","# printing out the cleared dictionary\n","print(our_class)\n","\n","# deleting the dictionary completely\n","del our_class"],"execution_count":65,"outputs":[{"output_type":"stream","text":["{'Name': '7 East', 'Students': 29, 'Wing': 'East'}\n","{}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZSQ6Uyb98jUU"},"source":["### Challenges 1.7"]},{"cell_type":"code","metadata":{"id":"SJv-VzAa8liR","colab":{"base_uri":"https://localhost:8080/","height":201},"executionInfo":{"status":"error","timestamp":1620140304240,"user_tz":240,"elapsed":1165,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}},"outputId":"898db35c-fce0-425f-beef-4e7311346ee3"},"source":["# Challenge 1\n","# Let's delete our family dictionary\n","#\n","del family \n"],"execution_count":66,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-66-c0193b9e5178>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mdel\u001b[0m \u001b[0mfamily\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mfamily\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'family' is not defined"]}]},{"cell_type":"code","metadata":{"id":"RtPPDlUg8mdN","executionInfo":{"status":"ok","timestamp":1620140342115,"user_tz":240,"elapsed":1612,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}}},"source":["# Challenge 2\n","# Let's clear our anagrams dictionary\n","#\n","anagram.clear()"],"execution_count":67,"outputs":[]},{"cell_type":"code","metadata":{"id":"de_1tLbS8mNr","executionInfo":{"status":"aborted","timestamp":1620137992665,"user_tz":240,"elapsed":31407,"user":{"displayName":"John Ruoro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSGcZ0vcaxlq_K6YI_aI-qT3JvOl20n_Oz0QhR=s64","userId":"14822035481844317635"}}},"source":["# Challenge 3\n","# Let's add another fuctionality to our Naivas Supermarket program\n","# The program will be updated to request the user to whether to delete \n","# any product. If so, the user should perform the deletion respectively.\n","#\n","print (\"Typer either Yes or NO\")\n","delfunc = str(input('Do you want to delete data?'))\n","\n","if delfunc == \"Yes\":\n","  ultumatum = (input(\"type 1 to delete data for bread and 0 for milk data: \" ))\n","  if ultumatum == 0 :\n","    naivas_inventory.pop(\"milk\")\n","  elif ultumatum ==1:\n","    naivas_inventory.pop (\"bread\") \n","elif delfunc == \"No\":\n","  print (\"No data change\")\n","else: \n","  print(\"Invalid answer\")"],"execution_count":null,"outputs":[]}]}